/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ame_editor;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import javax.swing.JFileChooser;
import java.nio.file.Paths;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.ListIterator;
import java.util.HashMap;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Thomas
 */
public class Form1 extends javax.swing.JFrame {

    /**
     * Creates new form Form1
     */
    public Form1() {
        initComponents();
    }
    
    private Path projectPath = Paths.get(System.getProperty("user.dir"));
    private Path batchFile = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileLocation = new javax.swing.JTextField();
        L_fileLocation = new javax.swing.JLabel();
        DetectFile = new javax.swing.JButton();
        L_key = new javax.swing.JLabel();
        L_value = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        keyArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        valueArea = new javax.swing.JTextArea();
        nested1 = new javax.swing.JTextField();
        L_nested2 = new javax.swing.JLabel();
        nested2 = new javax.swing.JTextField();
        L_files = new javax.swing.JLabel();
        files = new javax.swing.JButton();
        nested = new javax.swing.JButton();
        process = new javax.swing.JButton();
        L_projectPath = new javax.swing.JLabel();
        projectPathField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Adobe Media Encoder Batch Editor");
        setMinimumSize(new java.awt.Dimension(400, 500));

        jPanel1.setMinimumSize(new java.awt.Dimension(400, 500));

        L_fileLocation.setText("Adobe Media Encoder File Location (batch.xml)");

        DetectFile.setText("Detect");
        DetectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetectFileActionPerformed(evt);
            }
        });

        L_key.setText("Sequence Names:");

        L_value.setText("Matching File Names:");

        keyArea.setColumns(10);
        keyArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        keyArea.setRows(5);
        jScrollPane1.setViewportView(keyArea);

        valueArea.setColumns(10);
        valueArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        valueArea.setRows(5);
        jScrollPane2.setViewportView(valueArea);

        L_nested2.setText("to");

        L_files.setText("Read File Names From:");

        files.setText("Browse");
        files.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filesActionPerformed(evt);
            }
        });

        nested.setText("Nested:");
        nested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nestedActionPerformed(evt);
            }
        });

        process.setText("Process");
        process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processActionPerformed(evt);
            }
        });

        L_projectPath.setText("Project Path:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(process, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileLocation)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(L_fileLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DetectFile))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nested, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nested1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L_nested2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nested2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(L_files)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(files, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(L_key)
                        .addGap(106, 106, 106)
                        .addComponent(L_value)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(L_projectPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(projectPathField)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_fileLocation)
                    .addComponent(DetectFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L_value)
                    .addComponent(L_key))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nested1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nested2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L_nested2)
                    .addComponent(L_files)
                    .addComponent(files)
                    .addComponent(nested))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_projectPath)
                    .addComponent(projectPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(process, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DetectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetectFileActionPerformed
        batchFile = Paths.get(System.getProperty("user.home"), "AppData", "Roaming", "Adobe", "Adobe Media Encoder", "5.0", "batch.xml");
        fileLocation.setText(batchFile.toString());
    }//GEN-LAST:event_DetectFileActionPerformed

    private void nestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nestedActionPerformed
        int start;
        int end;
        try {
            start = Integer.parseInt(nested1.getText());
            end = Integer.parseInt(nested2.getText());
        } catch (NumberFormatException e) {
            return;
        }
        if (end < start)
            return;
        keyArea.setText(null);
        for (int i = start; i <= end; i++) {
            keyArea.append(String.format("Nested Sequence %02d", i) + "\n");
        }
    }//GEN-LAST:event_nestedActionPerformed

    private void filesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filesActionPerformed
        JFileChooser folder = new JFileChooser(projectPath.toFile());
        folder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (folder.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            valueArea.setText(null);
            projectPath = folder.getSelectedFile().toPath();
            projectPathField.setText(projectPath.toString());
            for (String file : projectPath.toFile().list()) {
                if (file.substring(file.length() - 4).equals(".bmp"))
                    valueArea.append(file.substring(0, file.length() - 4) + "\n");
            }
        }
    }//GEN-LAST:event_filesActionPerformed

    private void processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processActionPerformed
        // Put our keys and values into a HashMap
        String [] keys = keyArea.getText().split("\n");
        String [] values = valueArea.getText().split("\n");
        if (keys.length != values.length) {
            JOptionPane.showMessageDialog(this, "Left and right panes should have equal lines.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        HashMap<String, String> map = new HashMap();
        for (int i = 0; i < keys.length; i++)
            map.put(keys[i], values[i]);
        
        // Set up the output ArrayList
        ArrayList<String> newBatch = new ArrayList();
        
        // Create an iterator to go through the batch file
        ListIterator<String> batch;
        try {
            batch = Files.readAllLines(batchFile, Charset.forName("UTF-8")).listIterator();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Failed to read batch.xml file.\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Loop through each line until we hit a file
        while (batch.hasNext()) {
            String line = batch.next();
            if (line.startsWith("\t\t<SourceInfo>")) {
                
                // Found file, split this line to get sequence name
                String [] split = line.split("\", \"");
                String sequence = split[2].substring(8);
                
                // Check if we have a mapped value for it
                if (map.containsKey(sequence)) {
                    
                    // We have our key name, keep going until we hit the line to replace
                    newBatch.add(line);
                    while (batch.hasNext()) {
                        String line2 = batch.next();
                        if (line2.startsWith("\t\t<OutputBaseName>")) {
                            
                            // Write our two replacement lines, then break out
                            newBatch.add("\t\t<OutputBaseName>" + projectPath.toString()+ System.getProperty("file.separator") + map.get(sequence) + "</OutputBaseName>");
                            newBatch.add("\t\t<OutputFileName>" + projectPath.toString() + System.getProperty("file.separator") + map.get(sequence) + ".mp4</OutputFileName>");
                            batch.next();
                            break;
                        } else {
                            newBatch.add(line2);
                        }
                    }
                } else {
                    newBatch.add(line);
                }
            } else {
                newBatch.add(line);
            }
        }
        
        // Our new file is done, back up batch and write new one
        try {
            Files.copy(batchFile, Paths.get(batchFile.getParent().toString(), "batch_old.xml"), StandardCopyOption.REPLACE_EXISTING);
            Files.delete(batchFile);
            Files.write(batchFile, newBatch, Charset.forName("UTF-8"));
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Failed to back up batch.xml and write new one.\n\n" + e, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, "Process completed successfully.");
    }//GEN-LAST:event_processActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Set default system look and feel
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException|InstantiationException|IllegalAccessException|javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DetectFile;
    private javax.swing.JLabel L_fileLocation;
    private javax.swing.JLabel L_files;
    private javax.swing.JLabel L_key;
    private javax.swing.JLabel L_nested2;
    private javax.swing.JLabel L_projectPath;
    private javax.swing.JLabel L_value;
    private javax.swing.JTextField fileLocation;
    private javax.swing.JButton files;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea keyArea;
    private javax.swing.JButton nested;
    private javax.swing.JTextField nested1;
    private javax.swing.JTextField nested2;
    private javax.swing.JButton process;
    private javax.swing.JTextField projectPathField;
    private javax.swing.JTextArea valueArea;
    // End of variables declaration//GEN-END:variables
}
